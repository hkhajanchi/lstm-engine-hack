;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit MAC : 
  module MAC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip west : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<16>}, flip north : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<16>}, south : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt}, east : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt}, flip weight_input : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<16>}}
    
    reg weight : SInt<16>, clock with : (reset => (reset, asSInt(UInt<16>("h00")))) @[MAC.scala 29:25]
    reg busy : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MAC.scala 30:23]
    reg weight_loaded : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MAC.scala 31:32]
    reg x : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MAC.scala 32:20]
    reg east_reg : SInt<16>, clock with : (reset => (reset, asSInt(UInt<16>("h00")))) @[MAC.scala 33:27]
    node _T = eq(busy, UInt<1>("h00")) @[MAC.scala 36:30]
    io.weight_input.ready <= _T @[MAC.scala 36:27]
    node _T_1 = eq(busy, UInt<1>("h00")) @[MAC.scala 37:23]
    io.west.ready <= _T_1 @[MAC.scala 37:20]
    node _T_2 = eq(busy, UInt<1>("h00")) @[MAC.scala 38:23]
    io.north.ready <= _T_2 @[MAC.scala 38:20]
    io.east.valid <= UInt<1>("h00") @[MAC.scala 40:20]
    io.south.valid <= UInt<1>("h00") @[MAC.scala 41:20]
    io.east.bits <= asSInt(UInt<1>("h00")) @[MAC.scala 43:19]
    io.south.bits <= asSInt(UInt<1>("h00")) @[MAC.scala 44:19]
    node _T_3 = eq(weight_loaded, UInt<1>("h00")) @[MAC.scala 49:36]
    node _T_4 = and(io.weight_input.valid, _T_3) @[MAC.scala 49:33]
    when _T_4 : @[MAC.scala 49:52]
      weight <= io.weight_input.bits @[MAC.scala 50:14]
      weight_loaded <= UInt<1>("h01") @[MAC.scala 51:22]
      skip @[MAC.scala 49:52]
    node _T_5 = and(io.west.valid, io.north.valid) @[MAC.scala 59:25]
    node _T_6 = eq(busy, UInt<1>("h00")) @[MAC.scala 59:46]
    node _T_7 = and(_T_5, _T_6) @[MAC.scala 59:43]
    node _T_8 = and(_T_7, weight_loaded) @[MAC.scala 59:52]
    when _T_8 : @[MAC.scala 59:70]
      busy <= UInt<1>("h01") @[MAC.scala 60:12]
      skip @[MAC.scala 59:70]
    when busy : @[MAC.scala 64:18]
      node _T_9 = mul(io.west.bits, weight) @[MAC.scala 68:26]
      node _T_10 = add(_T_9, io.north.bits) @[MAC.scala 68:36]
      node _T_11 = tail(_T_10, 1) @[MAC.scala 68:36]
      node _T_12 = asSInt(_T_11) @[MAC.scala 68:36]
      x <= _T_12 @[MAC.scala 68:9]
      east_reg <= io.west.bits @[MAC.scala 69:16]
      skip @[MAC.scala 64:18]
    io.east.bits <= east_reg @[MAC.scala 73:17]
    io.south.bits <= x @[MAC.scala 74:18]
    io.east.valid <= busy @[MAC.scala 76:18]
    io.south.valid <= busy @[MAC.scala 77:19]
    node _T_13 = and(io.east.valid, io.east.ready) @[MAC.scala 80:25]
    node _T_14 = and(io.south.valid, io.south.ready) @[MAC.scala 80:62]
    node _T_15 = and(_T_13, _T_14) @[MAC.scala 80:43]
    when _T_15 : @[MAC.scala 80:82]
      busy <= UInt<1>("h00") @[MAC.scala 81:11]
      skip @[MAC.scala 80:82]
    
